#!/usr/bin/env python
"""Command line tool for managing a Digital Ocean development box"""
import argparse
import logging
import os
import re
import subprocess
import sys
import time
from datetime import datetime
from pprint import pformat, pprint
from typing import Dict, List, Optional, Iterator, Any

import requests

log = logging.getLogger("devbox")


def fingerprint_key(filename: str) -> str:
    proc = subprocess.run(
        ["ssh-keygen", "-f", filename, "-l", "-E", "md5"],
        capture_output=True,
        check=True,
        encoding="utf-8",
    )
    output = proc.stdout.strip()
    pieces = output.split()
    fingerprint = pieces[1]
    if fingerprint.startswith("MD5:"):
        fingerprint = fingerprint[4:]
    return fingerprint


def iter_public_keys() -> Iterator[str]:
    ssh_dir = os.path.join(os.getenv("HOME", ""), ".ssh")
    for filename in os.listdir(ssh_dir):
        if filename.endswith(".pub"):
            yield os.path.join(ssh_dir, filename)


def load_ssh_keys() -> List[str]:
    account_keys = set()
    ssh_keys = api_get_ssh_keys()
    if ssh_keys is None:
        raise Exception("No ssh keys found for account")
    for key in ssh_keys:
        account_keys.add(key["fingerprint"])
    ret = []
    for public_key in iter_public_keys():
        keyfile = os.path.splitext(public_key)[0]
        fingerprint = fingerprint_key(keyfile)
        if fingerprint in account_keys:
            ret.append(fingerprint)
    if not ret:
        raise Exception("No matching ssh keys found for account")
    return ret


def call(
    path: str, method: str = "GET", headers: Optional[Dict] = None, **data
) -> Optional[Dict]:
    json_data = None
    params = None
    if method in ("POST", "PUT"):
        json_data = data
    else:
        params = data
    secret = os.getenv("DO_SECRET_KEY")
    log.debug("%s %s: %s", method, path, pformat(data))
    headers = headers or {}
    headers["Authorization"] = f"Bearer {secret}"
    resp = requests.request(
        method,
        f"https://api.digitalocean.com{path}",
        headers=headers,
        json=json_data,
        params=params,
    )
    try:
        response_data = resp.json()
    except requests.exceptions.JSONDecodeError:
        response_data = None
    if not resp.ok:
        log.error("%s: %s", path, pformat(response_data))
        resp.raise_for_status()
    return response_data


def get_devbox(name: str) -> Optional[Dict]:
    resp = call("/v2/droplets", name=name)
    if resp:
        droplets = resp["droplets"]
        if droplets:
            return droplets[0]
    return None


def get_matching_snapshots(name: str) -> List[Dict]:
    resp = call("/v2/snapshots")
    if not resp:
        return []
    snaps = [s for s in resp["snapshots"] if s["name"].startswith(name)]
    snaps.sort(
        key=lambda s: datetime.strptime(s["created_at"], "%Y-%m-%dT%H:%M:%SZ"),
        reverse=True,
    )
    return snaps


def cmd_up_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the droplet to start (also used to match snapshot)",
        default=os.getenv("DO_DROPLET_NAME", "devi"),
    )
    parser.add_argument(
        "-r",
        "--region",
        help="The DO region (default %(default)s)",
        default=os.getenv("DO_REGION", "sfo"),
    )
    parser.add_argument(
        "-s", "--size", help="The size of the devbox", default="s-2vcpu-4gb"
    )
    parser.add_argument(
        "--default-image",
        help="The default image to use if no snapshot is present (default Ubuntu 22.04 LTS)",
        default="112929454",
    )


def select_region(regions: List[str], region: str):
    preferences = region.split(",")
    for pref in preferences:
        for r in regions:
            if r.startswith(pref):
                return r
    return regions[0]


def cmd_up(args):
    droplet = get_devbox(args.name)
    if droplet:
        print(f"{args.name} is already running")
    else:
        snaps = get_matching_snapshots(args.name)
        if snaps:
            snap = snaps[0]
        else:
            resp = call(f"/v2/images/{args.default_image}")
            if not resp:
                raise Exception("Could not find default image")
            snap = resp["image"]
            print(
                "Could not find snapshot for %s. Using default image %s"
                % (args.name, snap["name"])
            )
        region = select_region(snap["regions"], args.region)
        resp = call(
            "/v2/droplets",
            "POST",
            name=args.name,
            region=region,
            size=args.size,
            image=snap["id"],
            ssh_keys=load_ssh_keys(),
            # TODO make this configurable
            user_data="""#cloud-config
runcmd:
  - 'curl https://raw.githubusercontent.com/stevearc/dotfiles/master/bootstrap/bootstrap-cloud.sh | /bin/bash -s'
            """,
        )
        if not resp:
            raise Exception("No response from create droplet")
        droplet = resp["droplet"]
        print("Created droplet %s: %s" % (droplet["name"], droplet["id"]))
    networks = droplet["networks"]["v4"]
    if not networks:
        print("Waiting for droplet to connect to network")
        while not networks:
            time.sleep(10)
            droplet = get_devbox(args.name)
            if not droplet:
                raise Exception("Could not find new droplet")
            networks = droplet["networks"]["v4"]

    public_net = [n for n in networks if n["type"] == "public"]
    if not public_net:
        raise Exception(f"Could not find public IP address for {args.name}")
    public_ip = public_net[0]["ip_address"]
    update_ssh_config(args.name, public_ip)
    print(f"Droplet {args.name} ready")


def update_ssh_config(name: str, ip: str):
    config_file = os.path.join(os.getenv("HOME", ""), ".ssh", "config")
    lines = [f"Host {name}\n", f"  hostname {ip}\n", "  ForwardAgent yes\n"]
    if not os.path.exists(config_file):
        fd = os.open(config_file, os.O_CREAT | os.O_WRONLY, 0o700)
        with open(fd, "w", encoding="utf-8") as ofile:
            ofile.writelines(lines)
    else:
        new_lines = []
        with open(config_file, "r", encoding="utf-8") as ifile:
            inside_section = False
            for line in ifile:
                if inside_section:
                    if re.match(r"^[^\s]", line):
                        inside_section = False
                if line.startswith(f"Host {name}"):
                    inside_section = True
                if not inside_section:
                    new_lines.append(line)
        new_lines.extend(lines)
        with open(config_file, "w", encoding="utf-8") as ofile:
            ofile.writelines(new_lines)


NO_DEFAULT = object()


def prompt(msg, default=NO_DEFAULT, validate=None):
    """Prompt user for input"""
    while True:
        response = input(msg + " ").strip()
        if not response:
            if default is NO_DEFAULT:
                continue
            return default
        if validate is None or validate(response):
            return response


def prompt_option(text, choices, default=NO_DEFAULT):
    """Prompt the user to choose one of a list of options"""
    while True:
        for i, msg in enumerate(choices):
            print("[%d] %s" % (i + 1, msg))
        response = prompt(text, default=default)
        try:
            idx = int(response) - 1
            return choices[idx]
        except (ValueError, IndexError):
            print("Invalid choice\n")


def promptyn(msg, default=None):
    """Display a blocking prompt until the user confirms"""
    while True:
        yes = "Y" if default else "y"
        if default or default is None:
            no = "n"
        else:
            no = "N"
        confirm = prompt("%s [%s/%s]" % (msg, yes, no), "").lower()
        if confirm in ("y", "yes"):
            return True
        elif confirm in ("n", "no"):
            return False
        elif not confirm and default is not None:
            return default

def cmd_down_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the droplet to start (also used to match snapshot)",
        default=os.getenv("DO_DROPLET_NAME", "devi"),
    )

def cmd_down(args):
    droplet = get_devbox(args.name)
    if not droplet:
        print(f"{args.name} is not running")
        return
    drop_id = droplet["id"]
    call(
        f"/v2/droplets/{drop_id}",
        "DELETE",
    )
    print(f"Deleted droplet {args.name}")

def cmd_snapshot_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the droplet to start (also used to match snapshot)",
        default=os.getenv("DO_DROPLET_NAME", "devi"),
    )

def cmd_snapshot(args):
    droplet = get_devbox(args.name)
    if not droplet:
        print(f"{args.name} is not running")
        sys.exit(1)
    drop_id = droplet["id"]
    resp = call(f"/v2/droplets/{drop_id}/actions", "POST", type="snapshot")
    if not resp:
        raise Exception("Missing action response")
    action = resp["action"]
    action_id = action["id"]
    print("Snapshot starting...")
    while action["status"] == "in-progress":
        time.sleep(20)
        resp = call(f"/v2/images/{drop_id}/actions/{action_id}")
        if not resp:
            raise Exception("Missing action response")
        action = resp["action"]
    print("Snapshot %s" % action["status"])


def cmd_action_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the droplet to start (also used to match snapshot)",
        default=os.getenv("DO_DROPLET_NAME", "devi"),
    )
    parser.add_argument(
        "action",
        help="The droplet action to perform",
        choices=(
            "enable_backups",
            "disable_backups",
            "reboot",
            "power_cycle",
            "shutdown",
            "power_off",
            "power_on",
            # 'restore',
            "password_reset",
            # 'resize',
            # 'rebuild',
            # 'rename',
            # 'change_kernel',
            # 'enable_ipv6',
            # 'snapshot',
        ),
    )


def cmd_action(args):
    droplet = get_devbox(args.name)
    if not droplet:
        print(f"{args.name} does not exist")
        sys.exit(1)
    drop_id = droplet["id"]
    resp = call(f"/v2/droplets/{drop_id}/actions", "POST", type=args.action)
    pprint(resp)

def cmd_gc_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the droplet to start (also used to match snapshot)",
        default=os.getenv("DO_DROPLET_NAME", "devi"),
    )

def cmd_gc(args):
    snaps = get_matching_snapshots(args.name)
    print("Found %d snapshots" % len(snaps))
    for snap in snaps:
        print("%s %s" % (snap["created_at"], snap["name"]))
    for snap in snaps[1:]:
        if promptyn("Delete snapshot %s from %s?" % (snap["name"], snap["created_at"])):
            snap_id = snap["id"]
            print("Deleting snapshot %s [%s]" % (snap["name"], snap_id))
            call(f"/v2/images/{snap_id}", "DELETE")
    print("Done")


def cmd_sizes_add_args(parser):
    parser.add_argument(
        "-r",
        "--region",
        help="The DO region (default %(default)s)",
        default=os.getenv("DO_REGION", "sfo"),
    )


def cmd_sizes(args):
    resp = call("/v2/sizes", per_page=200)
    if not resp:
        print("Bad response")
        return
    entries = []

    for image in resp["sizes"]:
        if not image["available"]:
            continue
        if not any(map(lambda r: r.startswith(args.region), image["regions"])):
            continue
        entries.append(
            (
                image["slug"],
                "{}c".format(image["vcpus"]),
                "{:.0f}m".format(image["memory"] / 1024),
                "${:1.2f}/hr".format(image["price_hourly"]),
                image["description"],
            )
        )
    entries.sort()
    print_table(entries)

def cmd_images_add_args(parser):
    parser.add_argument(
        "-r",
        "--region",
        help="The DO region (default %(default)s)",
        default=os.getenv("DO_REGION", "sfo"),
    )

def cmd_images(args):
    resp = call("/v2/images", per_page=200)
    if not resp:
        print("Bad response")
        return
    entries = []

    for image in resp["images"]:
        if image["status"] != 'available':
            continue
        if not any(map(lambda r: r.startswith(args.region), image["regions"])):
            continue
        entries.append(
            (
                str(image["id"]),
                image['description'],
            )
        )
    entries.sort()
    print_table(entries)


def cmd_add_key_add_args(parser):
    parser.add_argument(
        "-f",
        "--file",
        help="The public key file to use",
    )
    parser.add_argument(
        "-n",
        "--name",
        help="The name of the new key (default %(default)s)",
        default=os.getenv("HOSTNAME"),
    )


def cmd_add_key(args):
    if not args.file:
        args.file = next(iter_public_keys())
    with open(args.file, "r", encoding="utf-8") as ifile:
        public_key = ifile.read()
    call("/v2/account/keys", method="POST", public_key=public_key, name=args.name)


def api_get_ssh_keys() -> Optional[List[Any]]:
    resp = call("/v2/account/keys", per_page=200)
    if not resp:
        return
    return resp["ssh_keys"]


def cmd_list_keys(args):
    ssh_keys = api_get_ssh_keys()
    if not ssh_keys:
        print("Bad response")
        return
    for key in ssh_keys:
        print("{name:} {fingerprint:}".format(**key))


def cmd_del_key_add_args(parser):
    parser.add_argument(
        "-n",
        "--name",
        required=True,
        help="The name of the key",
    )


def cmd_del_key(args):
    ssh_keys = api_get_ssh_keys()
    if ssh_keys is not None:
        for key in ssh_keys:
            if key["name"] == args.name:
                call("/v2/account/keys/%d" % key["id"], method="DELETE")
                return
    print(f"No key '{args.name}' found")

def print_table(table: List[List[str]]):
    max_len = [len(e) for e in table[0]]
    for entry in table:
        for i, e in enumerate(entry):
            max_len[i] = max(max_len[i], len(e))
    lines = []
    for entry in table:
        lines.append(" ".join([e.ljust(max_len[i]) for i, e in enumerate(entry)]))
    for line in lines:
        print(line)

def _setup_logging(args: argparse.Namespace) -> None:
    handler = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter("%(levelname)s %(asctime)s [%(name)s] %(message)s")
    handler.setFormatter(formatter)
    logging.root.addHandler(handler)
    level = logging.getLevelName(args.log_level)
    logging.root.setLevel(level)


def main() -> None:
    """Manage Digital Ocean development box"""
    if not os.getenv("DO_SECRET_KEY"):
        print("Missing environment variable DO_SECRET_KEY")
        sys.exit(1)
    parser = argparse.ArgumentParser(description=main.__doc__)

    parser.add_argument(
        "--log-level",
        type=lambda l: logging.getLevelName(l.upper()),
        default=logging.WARNING,
        help="Stdout logging level (default 'warning')",
    )

    subparsers = parser.add_subparsers(dest="cmd")
    cmd_up_add_args(subparsers.add_parser("up", help="Start the DO droplet"))
    cmd_down_add_args(subparsers.add_parser("down", help="Destroy the DO droplet"))
    cmd_snapshot_add_args(subparsers.add_parser("snapshot", help="Take a snapshot of the DO droplet"))
    cmd_gc_add_args(subparsers.add_parser("gc", help="Delete all snapshots but the most recent"))
    cmd_sizes_add_args(
        subparsers.add_parser("sizes", help="List all droplet sizes for the region")
    )
    cmd_images_add_args(
        subparsers.add_parser("images", help="List all images for the region")
    )
    cmd_action_add_args(
        subparsers.add_parser("action", help="Perform an action on the droplet")
    )
    cmd_add_key_add_args(
        subparsers.add_parser("add-key", help="Add ssh key to account")
    )
    subparsers.add_parser("list-keys", help="List all ssh keys")
    cmd_del_key_add_args(subparsers.add_parser("del-key", help="Delete an ssh key"))
    args = parser.parse_args()
    _setup_logging(args)

    if args.cmd == "up":
        cmd_up(args)
    elif args.cmd == "down":
        cmd_down(args)
    elif args.cmd == "snapshot":
        cmd_snapshot(args)
    elif args.cmd == "gc":
        cmd_gc(args)
    elif args.cmd == "action":
        cmd_action(args)
    elif args.cmd == "sizes":
        cmd_sizes(args)
    elif args.cmd == "images":
        cmd_images(args)
    elif args.cmd == "list-keys":
        cmd_list_keys(args)
    elif args.cmd == "add-key":
        cmd_add_key(args)
    elif args.cmd == "del-key":
        cmd_del_key(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
