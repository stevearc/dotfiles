#!/usr/bin/env python
import argparse
import json
import os
import os.path
import subprocess
import time
from typing import Dict, Optional

backlight_dir = os.path.join("/", "sys", "class", "backlight")
backlights = os.listdir(backlight_dir)


def _get_brightness(backlight: str) -> int:
    with open(
        os.path.join(backlight_dir, backlight, "brightness"), "r", encoding="ascii"
    ) as ifile:
        return int(ifile.read().strip())


def _get_max_brightness(backlight: str) -> int:
    with open(
        os.path.join(backlight_dir, backlight, "max_brightness"), "r", encoding="ascii"
    ) as ifile:
        return int(ifile.read().strip())


def get_brightness() -> Dict[str, float]:
    ret = {}
    for backlight in backlights:
        brightness = _get_brightness(backlight)
        max_brightness = _get_max_brightness(backlight)
        ret[backlight] = brightness / max_brightness
    return ret


def set_brightness(values: Dict[str, float]) -> None:
    for backlight, brightness in values.items():
        with open(
            os.path.join(backlight_dir, backlight, "brightness"), "w", encoding="ascii"
        ) as ofile:
            ofile.write(str(int(brightness * _get_max_brightness(backlight))))


def get_cache_file() -> str:
    cache_home = os.getenv(
        "XDG_CACHE_HOME", os.path.join(os.getenv("HOME", "/"), ".cache")
    )
    return os.path.join(cache_home, "bright.json")


def save_brightness(display: Optional[str], value: Dict[str, float]) -> None:
    file = get_cache_file()
    if display is not None:
        if display not in value:
            return
        value = {display: value[display]}
    with open(file, "w", encoding="utf-8") as ofile:
        json.dump(value, ofile)


def lerp(progress: float, start: float, end: float) -> float:
    delta = end - start
    return start + max(0, min(1, progress)) * delta


def tween_brightness(
    start_values: Dict[str, float], values: Dict[str, float], tween: Optional[float]
) -> None:
    if tween is None:
        set_brightness(values)
    else:
        for k in values:
            start_values.setdefault(k, values[k])
        step = 1 / 60
        start = time.time()
        now = start
        target = now + tween
        current = start_values.copy()
        while now < target:
            progress = (now - start) / (target - start)
            for k in values:
                current[k] = lerp(progress, start_values[k], values[k])
            set_brightness(current)
            time.sleep(step)
            now = time.time()
        set_brightness(values)


def smart_inc(start: float, amount: Optional[float], positive: bool):
    if positive:
        if amount is not None:
            return start + amount
        elif start >= 0.8:
            return 1
        elif start > 0.4:
            return start + 0.2
        elif start > 0.1:
            return start + 0.1
        else:
            return start + 0.02
    else:
        if amount is not None:
            return start - amount
        elif start >= 0.4:
            return start - 0.2
        elif start > 0.1:
            return start - 0.1
        elif start > 0.04:
            return start - 0.02
        elif start > 0.01:
            return start - 0.01
        else:
            return 0.01


def cmd_increment(
    display: Optional[str],
    amount: Optional[float],
    tween: Optional[float],
    save: bool,
    positive: bool,
) -> None:
    start = get_brightness()
    if save:
        save_brightness(display, start)
    b = start.copy()
    if display:
        b[display] = smart_inc(b[display], amount, positive)
    else:
        for k in b:
            b[k] = smart_inc(b[k], amount, positive)
    tween_brightness(start, b, tween)


def cmd_set(
    display: Optional[str], value: float, tween: Optional[float], save: bool
) -> None:
    start = get_brightness()
    if save:
        save_brightness(display, start)
    b = start.copy()
    if display:
        b[display] = value
    else:
        for k in b:
            b[k] = value
    tween_brightness(start, b, tween)


def cmd_get(display: Optional[str]) -> None:
    brightness = get_brightness()
    if display:
        print(brightness.get(display))
    else:
        for d, b in brightness.items():
            print(f"{d}: {b}")


def cmd_restore(tween: Optional[float]) -> None:
    file = get_cache_file()
    if not os.path.exists(file):
        print("No saved brightness")
        return
    with open(file, "r", encoding="utf-8") as ifile:
        brightness = json.load(ifile)
    start = get_brightness()
    tween_brightness(start, brightness, tween)


def _add_tween(parser: argparse.ArgumentParser) -> None:
    parser.add_argument(
        "-t",
        "--tween",
        type=float,
        help="Tween to the target brightness over this many seconds",
    )


def _add_save(parser: argparse.ArgumentParser) -> None:
    parser.add_argument(
        "-s",
        "--save",
        action="store_true",
        help="Save the current brightness before changing",
    )


def _add_inc_parser(parser: argparse.ArgumentParser, name: str) -> None:
    parser.add_argument(
        "delta",
        nargs="?",
        type=float,
        help="Amount to change brightness by (-1 to 1)",
    )
    parser.set_defaults(cmd=name)
    _add_tween(parser)
    _add_save(parser)


def main() -> None:
    """Get or set monitor brightness"""
    parser = argparse.ArgumentParser(description=main.__doc__)
    parser.add_argument(
        "-d", "--display", required=False, help="Change the brightness of this display"
    )
    subparsers = parser.add_subparsers()

    _add_inc_parser(subparsers.add_parser("inc"), "inc")
    _add_inc_parser(subparsers.add_parser("dec"), "dec")

    set_parser = subparsers.add_parser("set")
    set_parser.add_argument("value", type=float, help="New brightness (0 to 1)")
    set_parser.set_defaults(cmd="set")
    _add_tween(set_parser)
    _add_save(set_parser)

    get_parser = subparsers.add_parser("get")
    get_parser.set_defaults(cmd="get")

    restore_parser = subparsers.add_parser("restore")
    restore_parser.set_defaults(cmd="restore")
    _add_tween(restore_parser)

    args = parser.parse_args()
    if "cmd" not in args:
        parser.print_help()
    elif args.cmd == "inc":
        cmd_increment(args.display, args.delta, args.tween, args.save, True)
    elif args.cmd == "dec":
        cmd_increment(args.display, args.delta, args.tween, args.save, False)
    elif args.cmd == "set":
        cmd_set(args.display, args.value, args.tween, args.save)
    elif args.cmd == "get":
        cmd_get(args.display)
    elif args.cmd == "restore":
        cmd_restore(args.tween)
    else:
        print(f"Unknown command {args.cmd}")


if __name__ == "__main__":
    main()
