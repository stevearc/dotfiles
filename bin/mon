#!/bin/bash

BUFFER=.5
USAGE="$0 [<FILE>...] COMMAND

Options:
  -b buffer      Accumulate events for this long before running the command
                 (default $BUFFER)
  -e             Eager execution. Run the command once after mon is called.
  -s             Single execution. Will not listen for any events while the
                 command is running.
"

# Enable history (some of my aliases use that)
set -o history
# Don't save history to file, however
unset HISTFILE
# Allow expanding aliases
shopt -s expand_aliases
# Grab aliases if present
if [ -e ~/.bash_aliases ]; then
  source ~/.bash_aliases
fi

EVENTS="CREATE,CLOSE_WRITE,DELETE,DELETE_SELF,MODIFY,MOVED_FROM,MOVED_TO,MOVE_SELF"

declare -a DIRS=()

# Parse arguments
while [ -n "$1" ]; do
  if [ "$1" == "-b" ]; then
    shift
    BUFFER="$1"
  elif [ "$1" == "-h" ]; then
    echo "$USAGE"
    exit
  elif [ "$1" == "-s" ]; then
    SINGLE=1
  elif [ "$1" == "-e" ]; then
    EAGER=1
  elif [ -z "$2" ]; then
    CMD="$1"
  else
    DIRS+=("$1")
  fi
  shift
done

# If no files/dirs specified, default to watching the current directory
if [ -z "${DIRS[0]}" ]; then
  DIRS+=(".")
fi

if [ -z "$CMD" ]; then
  echo "$USAGE"
  exit 1
fi

(
  trap exit SIGINT
  while true; do
    # Filter the args for files/folders that exist, because if you attempt to
    # watch something that isn't there, inotifywait will exit. This is useful if
    # you want to watch a file that doesn't exist yet, or you are watching a
    # file that gets deleted.
    declare -a EXISTING_DIRS=()
    for DIR in "${DIRS[@]}"; do
      if [ -e "$DIR" ]; then
        EXISTING_DIRS+=("$DIR")
      fi
    done
    # We don't use -m because we want to watch paths, not inodes. If you watch a
    # file and that file gets deleted, but then another file replaces it,
    # inotifywait won't start watching the new file. That's why we have this
    # whole watch in a loop.
    if command -v inotifywait > /dev/null 2>&1; then
      inotifywait -q -e "$EVENTS" -r --format '%:e %f' "${EXISTING_DIRS[@]}"
    elif command -v fswatch > /dev/null 2>&1; then
      # We would like to use fswatch -o, but -o and -1 are mutually exclusive
      fswatch -r -0 -1 "${EXISTING_DIRS[@]}"
      echo ''
    else
      exit 1
    fi
  done
) | (
  while true; do
    if [ -z "$EAGER" ]; then
      read _
      sleep "$BUFFER"
    fi
    # Clear out stdin. We want multiple events to only trigger one run.
    while read -r -t 0; do read -r; done
    echo "+$CMD"
    eval "$CMD"
    if [ "$SINGLE" ]; then
      # If we're doing "single execution", then clear out all events that were
      # fired while running the command.
      while read -r -t 0; do read -r; done
    fi
    if [ -n "$EAGER" ]; then
      read _
      sleep "$BUFFER"
    fi
  done
)
