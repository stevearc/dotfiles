#!/bin/bash
source parseargs.sh
set -e


# Frames {{{1

_cmd_frames() {
  local usage="frames <INPUT>

Options:
  -f FILENAME      Base name of frames
  -r RATE          Framerate (e.g. 1/1, 1/60)
"
  parseargs "$usage" "$@"
  local ratestr=""
  if [ -n "$RATE" ]; then
    ratestr="-r $RATE"
  fi
  _run "ffmpeg -i $INPUT $ratestr ${FILENAME}%03d.jpg"
}
_frames_doc() {
  echo "Extract frames from a video"
}

# Compress {{{1

_cmd_compress() {
  local usage="compress <INPUT> <OUTPUT>

Options:
  -c CRF    Constant Rate Factor (try 18-25. Higher means more compression)
"
  parseargs "$usage" "$@"
  _run "ffmpeg -i '$INPUT' -crf ${CRF-22} '$OUTPUT'"
}
_compress_doc() {
  echo "Compress a video"
}

# To GIF {{{1

_cmd_togif() {
  local usage="togif <INPUT> <OUTPUT>

Options:
  -s START       Start time
  -t DURATION    Duration of gif
  -f FPS         Frames per Second (default 12)
  -w WIDTH       Width of resulting gif (default 1280)
"
  parseargs "$usage" "$@"
  local startargs=
  if [ -n "$START" ]; then
    startargs="-ss '$START'"
  fi
  local durationargs=
  if [ -n "$DURATION" ]; then
    durationargs="-t '$DURATION'"
  fi
  _run "ffmpeg $startargs $durationargs -i '$INPUT' -filter_complex '[0:v] fps=${FPS-12},scale=w=${WIDTH-1280}:h=-1,split [a][b];[a] palettegen [p];[b][p] paletteuse' '$OUTPUT'"
}
_togif_doc() {
  echo "Convert a video into a GIF"
}

# To MP3 {{{1

_cmd_tomp3() {
  local usage="tomp3 [<FILE>...]"
  parseargs "$usage" "$@"
  for file in $FILE; do
    pushd "$(dirname "$file")" > /dev/null
    local base=
    base="$(basename "$file")"
    local output="${base%.*}.mp3"
    if [ -e "$output" ]; then
      echo "Skipping $file - output file $output already exists!"
      continue
    fi
    echo "Converting $file to $output"
    _run "ffmpeg -i '$file' -vn -f mp3 '$output'"
    popd > /dev/null
  done
}
_tomp3_doc() {
  echo "Convert a file into a MP3"
}

# Stabilize {{{1

_cmd_stabilize() {
  local usage="stabilize <INFILE> <OUTFILE>

Options:
  -s SHAKINESS, --shakiness=SHAKINESS  Shakiness [1-10] (default 5)
  -t STEPSIZE, --stepsize=STEPSIZE     Step size [0-100] (default 6)
  -a ACCURACY, --accuracy=ACCURACY     Accuracy [1-15] (default 5)
  -p, --process                        Skip detect, only run transform                                   
  -z ZOOM, --zoom=ZOOM                 Percent to zoom in [-500-500] (default 0)
  -o OPTZOOM, --optzoom=OPTZOOM        Automatically determine optimal zoom. 1 - static zoom, 2 - adaptive zoom (default 1)
  -m SMOOTHING, --smoothing=SMOOTHING  Number of frames for lowpass filtering (2N + 1 frames) [0-100] (default 15)
  --vectors=VECTORS                    Intermediate vectors file
"
  parseargs "$usage" "$@"
  local transform_vectors="${VECTORS-${INFILE}.trf}"
  if [ -z "$PROCESS" ]; then
    _run "ffmpeg -i '$INFILE' -vf 'vidstabdetect=stepsize=${STEPSIZE-6}:shakiness=${SHAKINESS-5}:accuracy=${ACCURACY-5}:result=$transform_vectors' -f null -"
  fi
  _run "ffmpeg -i '$INFILE' -vf 'vidstabtransform=input=${transform_vectors}:zoom=${ZOOM-0}:optzoom=${OPTZOOM-1}:smoothing=${SMOOTHING-15},unsharp=5:5:0.8:3:3:0.4' -vcodec libx264 -preset slow -tune film -crf 18 -acodec copy '$OUTFILE'"
}
_stabilize_doc() {
  echo "Stabilize a video"
}

# Speed {{{1

_cmd_speed() {
  local usage="speed <INPUT> <OUTPUT>

Options:
  -r RATE    Multiplier for video speed
"
  parseargs "$usage" "$@"
  local rate="1"
  local invrate="1"
  if [ -n "$RATE" ]; then
    rate="$RATE"
    invrate="$(echo "1.0 / $RATE" | bc -l | sed 's/0*$//')"
  fi
  _run "ffmpeg -i '$INPUT' -filter_complex '[0:v]setpts=${invrate}*PTS[v];[0:a]atempo=${rate}[a]' -map '[v]' -map '[a]' '$OUTPUT'"
}
_speed_doc() {
  echo "Speed up or slow down a video"
}

# Stop Motion {{{1

_cmd_stopmotion() {
  local usage="stopmotion <PATTERN> <OUTPUT>

Options:
  -f FRAMERATE     Frames per second (default 30)
  -c CRF           Constant Rate Factor (15-25 is good)
"
  parseargs "$usage" "$@"
  local frames="${FRAMERATE-30}"
  local crf=""
  if [ -n "$CRF" ]; then
    crf="-crf $CRF"
  fi
  _run "ffmpeg -framerate $frames -pattern_type glob -i '$PATTERN' -vcodec libx264 $crf -pix_fmt yuv420p $OUTPUT"
}
_stopmotion_doc() {
  echo "Compile images into a video"
}

# Side by Side {{{1

_cmd_sidebyside() {
  local usage="sidebyside <INPUT1> <INPUT2> <OUTPUT>"
  parseargs "$usage" "$@"
  _run "ffmpeg -i $INPUT1 -i $INPUT2 -filter_complex '[0:v]pad=iw*2:ih[int];[int][1:v]overlay=W/2:0[vid]' -map [vid] -c:v libx264 -crf 23 -preset veryfast $OUTPUT"
}
_sidebyside_doc() {
  echo "Put two videos side-by-side"
}

# Screenshot {{{1

_cmd_screenshot() {
  local usage="screenshot <INPUT> <TIME> <OUTPUT>

Notes:
  TIME     Format is \"hh:mm:ss\"
"
  parseargs "$usage" "$@"
  _run "ffmpeg -ss $TIME -i $INPUT -vframes 1 -q:v 2 $OUTPUT"
}
_screenshot_doc() {
  echo "Extract a screenshot from a video"
}

# Clip {{{1

_cmd_clip() {
  local usage="clip <INPUT> <OUTPUT> [<TIME>...]

Notes:
  TIME     Format is \"hh:mm:ss\"
"
  parseargs "$usage" "$@"
  if [ -e "$OUTPUT" ]; then
    echo "File '$OUTPUT' already exists!"
    return 1
  fi
  local i=1
  local tmpbase="tmp-${RANDOM}"
  local tmpfiles="$tmpbase-files.txt"
  local cleancmd="rm -f $tmpfiles"

  if [ -z "$TIME" ]; then
    cp "$INPUT" "$OUTPUT"
    return
  fi

  for range in $TIME; do
    local _start=$(_convert_time "${range%%-*}")
    local _stop=$(_convert_time "${range##*-}")
    local duration=
    if [ -n "$_stop" ]; then
      local duration=$((_stop - _start))
    fi
    local tmpfile="${tmpbase}-${i}.mp4"
    __clip "$INPUT" "$_start" "$duration" "$tmpfile"
    echo "file '$tmpfile'" >> "$tmpfiles"
    cleancmd="$cleancmd $tmpfile"
    i=$((i+1))
  done
  _run "ffmpeg -f concat -i \"$tmpfiles\" -c copy \"$OUTPUT\""
  _run "$cleancmd"

}
_clip_doc() {
  echo "Extract clips from a video"
}

__clip() {
  local input="$1"
  local start="$2"
  local duration_args=
  if [ -n "$3" ]; then
    local duration_args="-t $3"
  fi
  local output="$4"
  # try libfdk_aac if aac doesn't work
  _run "ffmpeg -y -i \"$input\" -ss $start $duration_args -acodec aac -vcodec h264 \"$output\""
}

# Concat {{{1

_cmd_concat() {
  local usage="concat <OUTPUT> [<INPUT>...]"
  parseargs "$usage" "$@"
  local tmpfiles="tmp-${RANDOM}-files.txt"
  for input in $INPUT; do
    echo "file '$input'" >> "$tmpfiles"
  done
  if [ ! -e "$tmpfiles" ]; then
    # No inputs provided
    return 0
  fi
  _run "ffmpeg -f concat -i \"$tmpfiles\" -c copy \"$OUTPUT\""
  rm -f "$tmpfiles"
}
_concat_doc() {
  echo "Concat multiple videos into one"
}

# Concat 2 {{{1

_cmd_concat2() {
  local usage="concat2 <OUTPUT> [<INPUT>...]"
  parseargs "$usage" "$@"
  if [ -z "$INPUT" ]; then
    return 0
  fi
  local tmpbase="tmp-${RANDOM}"
  local intermediate_all="$tmpbase-intermediate-all.mpg"
  local cleancmd="rm -f $intermediate_all"
  let n="0" || :
  for input in $INPUT; do
    local intermediate="$tmpbase-$n.mpg"
    _run "ffmpeg -i $input -qscale:v 1 $intermediate"
    cleancmd="$cleancmd '$intermediate'"
    let n="$n + 1"
  done
  cat $tmpbase-*.mpg > "$intermediate_all"
  _run "ffmpeg -i $intermediate_all -qscale:v 2 $OUTPUT"
  eval "$cleancmd"
}
_concat2_doc() {
  echo "Concat multiple videos into one (alternate implementation)"
}

# Utils {{{1

_run() {
  echo "$1"
  eval "$1"
}

_convert_time() {
  if [[ "$1" =~ .*:.* ]]; then
    local seconds="${1##*:}"
    # Trim off leading zeroes
    local seconds="${seconds##0}"
    local minutes="${1%%:*}"
    echo "$((minutes*60 + seconds))"
  else
    echo "$1"
  fi
}

main() {
  local cmd="$1"; shift || :
  if [ -z "$cmd" ]; then
    local cmds
    cmds="$(declare -F | cut -f 3 -d ' ' | grep "^_cmd_" | sed 's/^_cmd_//' | sort)"
    (for cmd in $cmds; do
      echo -n "$cmd | "
      _${cmd}_doc
    done) | column -s "|" -t
  else
    _cmd_$cmd "$@"
  fi
}

main "$@"
# vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1
