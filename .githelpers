#!/bin/bash

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

pretty_git_log() {
    git log --graph --abbrev-commit --date=relative --pretty="tformat:${FORMAT}" $* |
        # Replace (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # Page only if we need to
        less -FXRS
}

update_master() {
    local changes=$(git status --porcelain 2>/dev/null| egrep "^(M| M)" | wc -l)
    if [ "$changes" != "0" ]; then
        git stash
    fi

    local branch=$(_get_branch)
    if [ "$branch" != "master" ]; then
        git checkout master
    fi
    git fetch -p
    git rebase origin/master
    if [ "$branch" != "master" ]; then
        git checkout $branch
    fi

    if [ "$changes" != "0" ]; then
        git stash pop
    fi
}

push_current_branch() {
    local branch=$(_get_branch)
    if [ "$branch" == "master" ]; then
        echo "DON'T FORCE PUSH MASTER"
        exit 1
    fi
    git push -u origin $branch $@
}

_github() {
    local uri=$1
    if [ ! $GITHUB_TOKEN ]; then
        echo "WARNING: No GITHUB_TOKEN specified" >&2
    fi
    curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/$uri" 2> /dev/null
}

_get_repo() {
    git remote -v | grep push | cut -f 2 | cut -f 2 -d : | cut -f 1 -d ' '
}

_get_branch() {
    git branch | cut -d ' ' -f 2 | tr -d '\n'
}

_get_browser() {
    if [ $BROWSER ]; then
        echo "$BROWSER"
    else
        echo "google-chrome"
    fi
}

create_pull_request() {
    local usage="$0 [-f ####]"
    local fix=
    while getopts "f:" opt; do
        case $opt in
            f)
                fix=$OPTARG
                ;;
            \?)
                echo "$usage"
                exit 1
                ;;
        esac
    done
    shift $(($OPTIND-1))

    local repo=$(_get_repo)
    local branch=$(_get_branch)
    # If no -f specified, try to pull issue number off end of local branch
    if [[ ! $fix ]] && [[ $branch =~ ([^\-]+-)*[0-9]+ ]]; then
        local fix="${branch##*-}"
    fi

    local browser=$(_get_browser)
    local url="https://github.com/$repo/compare/$branch?expand=1"
    if [ $fix ]; then
        local issue_title=$(_github repos/$repo/issues/$fix | grep title | cut -f 4 -d \" | head -n 1)
        local body="Fix #$fix: $issue_title"
        body="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$body")"
        url="$url&body=$body"
    fi
    $browser $url
}

commit_fix() {
    local fix="$1"
    local branch=$(_get_branch)
    # If no issue specified, try to pull issue number off end of local branch
    if [[ ! $fix ]] && [[ $branch =~ ([^\-]+-)*[0-9]+ ]]; then
        local fix="${branch##*-}"
    fi
    if [ ! $fix ]; then
        echo "Usage: git fix ISSUE" >&2
        exit 1
    fi
    local repo=$(_get_repo)
    local issue_title=$(_github repos/$repo/issues/$fix | grep title | cut -f 4 -d \" | head -n 1)
    git commit -m "Fix #$fix: $issue_title"
    git log -n 1
}

find_pull_request() {
    local commit="$1"
    local repo=$(_get_repo)
    local url="https://github.com/$repo/search?q=$commit&type=Issues"
    local browser=$(_get_browser)
    $browser $url
}

$*
