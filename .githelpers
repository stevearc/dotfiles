#!/bin/bash

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(auto)%d%Creset"
SUBJECT="%s"

# FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"
FORMAT="$HASH $RELATIVE_TIME $AUTHOR $REFS $SUBJECT"

pretty_git_log() {
  git log --graph --abbrev-commit --date=relative --color=always --pretty="tformat:${FORMAT}" "$@" |
    # Replace (2 years ago) with (2 years)
    sed -Ee 's/(^[^<]*) ago\)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/'

  # Line columns up based on } delimiter
  # column -s '}' -t
}

pretty_git_log_paged() {
  pretty_git_log "$@" |
    # Page only if we need to
    less -FXRS
}

contextual_git_log() {
  local height=
  if [[ $1 =~ ^\-[0-9]+$ ]]; then
    height="${1#-}"
    shift
  else
    height=20
  fi

  local after
  after=$(git log "HEAD~$height" -1 --pretty="tformat:%aI" 2>/dev/null)
  if [ -n "$after" ]; then
    after="--after=\"$after\""
  fi

  local tmpfile
  tmpfile=$(mktemp)
  git log $after --all --graph --abbrev-commit --date=relative --color=always --pretty="tformat:${FORMAT}" "$@" |
    # Replace (2 years ago) with (2 years)
    sed -Ee 's/(^[^<]*) ago\)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' >"$tmpfile"

  local head_line
  head_line=$(grep -n "[^/]HEAD" -m 1 "$tmpfile" | cut -f 1 -d :)
  local cutoff
  cutoff=$((head_line - height / 2))
  if [ $cutoff -le 0 ]; then
    head -n "$height" "$tmpfile" # | column -s '}' -t
  else
    tail -n "+$cutoff" "$tmpfile" | head -n "$height" # | column -s '}' -t
  fi
}

contextual_git_log_paged() {
  contextual_git_log "$@" |
    # Page only if we need to
    less -FXRS
}

push_current_branch() {
  local branch
  branch=$(git branch --show-current)
  git push -u origin "$branch" "$@"
}

update_master() {
  local changes
  changes=$(git status --porcelain 2>/dev/null | grep -c -E "^(M| M)")
  if [ "$changes" != "0" ]; then
    git stash
  fi

  local branch
  branch=$(git branch --show-current)
  local master
  master=$(git main)
  if [ "$branch" != "$master" ]; then
    git checkout "$master"
  fi
  git fetch -p
  git rebase "origin/$master"
  if [ "$branch" != "$master" ]; then
    git checkout "$branch"
  fi

  if [ "$changes" != "0" ]; then
    git stash pop
  fi
}

_github() {
  local uri="$1"
  if [ -z "$GITHUB_TOKEN" ]; then
    echo "WARNING: No GITHUB_TOKEN specified" >&2
  fi
  curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/$uri" 2>/dev/null
}

_get_repo_url() {
  local url="$(git remote get-url origin)"
  if [[ $url =~ ^http ]]; then
    # Strip the .git off the end, if present.
    echo "${url%.git}"
  else
    echo "$url" |
      # Trim the git@ from the start
      sed 's/^.*@//' |
      sed 's|:|/|' |
      sed 's|^|https://|'
  fi
}

_get_repo() {
  local repo
  repo=$(git remote -v | grep push | cut -f 2 | cut -f 2 -d : | cut -f 1 -d ' ')
  # Strip the .git off the end, if present.
  echo "${repo%.git}"
}

_open_in_browser() {
  local url="${1?Usage: _open_in_browser URL}"
  echo "$url"
  if [ "$(uname -s)" = "Darwin" ]; then
    open "$url"
  elif [ -n "$BROWSER" ]; then
    $BROWSER "$url"
  else
    google-chrome "$url"
  fi
}

create_pull_request() {
  local usage="$0 [-f ####]"
  local fix=
  while getopts "f:" opt; do
    case $opt in
    f)
      fix=$OPTARG
      ;;
    \?)
      echo "$usage"
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  local repo
  repo=$(_get_repo)
  local branch
  branch=$(git branch --show-current)

  local url="$(_get_repo_url)/compare/$branch?expand=1"
  if [ -n "$fix" ]; then
    local issue_title
    issue_title=$(_github "repos/$repo/issues/$fix" | grep title | cut -f 4 -d \" | head -n 1)
    local body="fix: $issue_title (#$fix)"
    body="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$body")"
    url="$url&body=$body"
  fi
  _open_in_browser "$url"
}

commit_fix() {
  local fix="${1?Must specify an issue number}"
  if [ -z "$fix" ]; then
    echo "Usage: git fix ISSUE" >&2
    exit 1
  fi
  local repo
  repo=$(_get_repo)
  local issue_title
  issue_title=$(_github "repos/$repo/issues/$fix" | grep title | cut -f 4 -d \" | head -n 1)
  git commit -m "Fix #$fix: $issue_title"
  git log -n 1
}

find_pull_request() {
  local commit="$1"
  local repo
  repo=$(_get_repo)
  local url="$(_get_repo_url)/search?q=$commit&type=Issues"
  _open_in_browser "$url"
}

show_modified_files() {
  local commit="$1"
  local root=
  root=$(git rev-parse --show-toplevel)
  if [ -n "$commit" ]; then
    git diff-tree --no-commit-id --name-status -r "$commit" |
      grep "^[AM]" |
      awk '{print $2}' |
      while read -r filename; do
        echo "$root/$filename"
      done
  else
    git status --porcelain |
      sed '/\/$/d' |
      sed '/^ *D /d' |
      awk '{print $2}' |
      while read -r filename; do
        echo "$root/$filename"
      done
  fi
}

confirm() {
  # $1 (optional) [str] - Prompt string
  # $2 (optional) [y|n] - The default return value if user just hits enter
  local prompt="${1-Are you sure?}"
  local default="$2"
  case $default in
  [yY])
    prompt="$prompt [Y/n] "
    ;;
  [nN])
    prompt="$prompt [y/N] "
    ;;
  *)
    prompt="$prompt [y/n] "
    ;;
  esac
  while true; do
    read -r -p "$prompt" response
    case $response in
    [yY][eE][sS] | [yY])
      return 0
      ;;
    [nN][oO] | [nN])
      return 1
      ;;
    *)
      if [ -z "$response" ]; then
        case $default in
        [yY])
          return 0
          ;;
        [nN])
          return 1
          ;;
        esac
      fi
      ;;
    esac
  done
}

delete_merged() {
  # Now find local branches with no remote
  for branch in $(git branch --format "%(refname:short) %(upstream)" | awk '{if (!$2) print $1;}') $(git branch --no-color --merged "$(git main)" | grep -v '\*\|master\|develop\|main'); do
    if git rev-parse "$branch" >/dev/null 2>&1; then
      pretty_git_log -20 "$branch"
      echo ""
      if confirm "Delete $branch?" "n"; then
        local deleted=1
        git branch -d "$branch" || deleted=
        if [ ! $deleted ]; then
          if confirm "Force delete $branch?" "n"; then
            git branch -D "$branch"
          fi
        fi
      fi
    fi
  done
}

realpath() {
  if ! readlink -f "$1" 2>/dev/null; then
    [[ $1 == /* ]] && echo "$1" || echo "$PWD/${1#./}"
  fi
}

install-hooks() {
  for script in .github/pre-* .github/hooks/* hooks/* git_hooks/*; do
    local hookdir=$(git hookdir)
    local base=$(basename "$script")
    if [ "$base" = '*' ] || [ "$base" = 'pre-*' ]; then
      continue
    fi
    local dest="${hookdir}/${base}"
    local abspath=$(realpath "$script")
    rm -f "$dest"
    echo "Installing $base hook"
    ln -s "$abspath" "$dest"
  done
}

cmd=$1
shift
"$cmd" "$@"
