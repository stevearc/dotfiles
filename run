#!/bin/bash -e
set -e
declare -r CLI_DOTFILES=".bash_aliases .inputrc .psqlrc .githelpers .tmux.conf .agignore .shellcheckrc .sqliterc .xbindkeysrc"

export HERE=$(dirname "$(realpath "$0")")
source "$HERE/scripts/utils.sh"
source "$HERE/scripts/all_platforms.sh"
if [ $UBUNTU ]; then
  source "$HERE/scripts/ubuntu.sh"
fi
if [ $MANJARO ]; then
  source "$HERE/scripts/manjaro.sh"
fi
if [ $WSL ]; then
  source "$HERE/scripts/wsl.sh"
fi
if [ $LINUX ]; then
  source "$HERE/scripts/linux.sh"
  if [ ! $WSL ]; then
    source "$HERE/scripts/linux-desktop.sh"
  fi
fi
if [ $MAC ]; then
  source "$HERE/scripts/mac.sh"
fi

print-command-help() {
  local prefix="$1"
  local commands
  commands="$(declare -F | grep "\\b$prefix" | awk '{print $3}')"
  (for cmd in $commands; do
    local docvar
    docvar="$(echo "$cmd" | tr '-' '_' | tr '[:lower:]' '[:upper:]')_DOC"
    local doc
    doc=$(eval 'echo $'"$docvar")
    echo "  ${cmd#$prefix}{$doc"
  done) | column -s '{' -t
}

# shellcheck disable=SC2034
DOTCMD_LANGUAGE_DOC="Install support for programming languages"
dotcmd-language() {
  if [ "$1" == "-h" ] || [ -z "$1" ]; then
    echo "$0 language [<language>...]

Languages:"
    print-command-help install-language-
    return
  fi
  local language="$1"
  shift
  while [ -n "$language" ]; do
    local cmd="install-language-$language"
    $cmd
    language="$1"
    shift
  done
}

# shellcheck disable=SC2034
DOTCMD_INSTALL_DOC="Install a program"
dotcmd-install() {
  if [ "$1" == "-h" ] || [ -z "$1" ]; then
    echo "$0 install [<program>...]

Programs:"
    print-command-help dc-install-
    return
  fi
  local prog="$1"
  shift
  while [ -n "$prog" ]; do
    local cmd="dc-install-$prog"
    $cmd
    prog="$1"
    shift
  done
}

# shellcheck disable=SC2034
DOTCMD_DOTFILES_DOC="Install dotfiles"
dotcmd-dotfiles() {
  local symbolic=1
  local usage="Usage: $0 dotfiles [opts]

Opts:
  -c      Copy files instead of symbolic linking"
  while getopts "hc" opt; do
    case $opt in
      c)
        symbolic=
        ;;
      h)
        echo "$usage"
        exit
        ;;
      \?)
        echo "$usage"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND - 1))
  hascmd dc-install-common && dc-install-common

  if [ $symbolic ]; then
    for dotfile in $CLI_DOTFILES; do
      link "$HERE/$dotfile" "$HOME/$dotfile"
    done
    grep "source .*dotfiles/.bashrc" ~/.bashrc >/dev/null 2>&1 || echo "source \"$HERE/.bashrc\"" >>~/.bashrc
  else
    rsync -lrp $CLI_DOTFILES "$HOME"
    cp "$HERE/.bashrc" "$HOME"
  fi

  mkdir -p "$HOME/.local/bin"
  if [ $symbolic ]; then
    for executable in "$HERE"/bin/*; do
      link "$executable" "$HOME/.local/bin/$(basename "$executable")"
    done
    link "$HERE/parseargs/parseargs.sh" "$HOME/.local/bin/parseargs.sh"
  else
    rsync -lrp bin "$HOME/.local/bin"
    cp "$HERE/parseargs/parseargs.sh" "$HOME/.local/bin/"
  fi

  mkdir -p ~/.config
  for conf in "$HERE"/.config/*; do
    local dest
    dest="${XDG_CONFIG_HOME:-$HOME/.config}"/"$(basename "$conf")"
    mirror "$conf" "$dest" "$symbolic"
  done
  if [ $symbolic ]; then
    link "$HERE/.config/nvim" "$HOME/.config/nvim"
  else
    rsync -lrp .config/nvim ~/.config/
  fi
  rm -rf ~/.local/share/nvim/site/pack
  for plugin in "$HERE"/vimplugins/*; do
    cp-vim-plugin "$(basename "$plugin")" "$symbolic"
  done

  mkdir -p ~/.bash.d
  if [ $symbolic ]; then
    for file in "$HERE"/bash.d/*; do
      link "$file" "$HOME/.bash.d/$(basename "$file")"
    done
  else
    rsync -lrp bash.d "$HOME/.bash.d"
  fi

  if [ -e ~/.bash_profile ]; then
    grep "source ~/.bashrc" ~/.bash_profile >/dev/null 2>&1 || echo "source ~/.bashrc" >>~/.bash_profile
  fi

  configure-git
}

# shellcheck disable=SC2034
DOTCMD_UPGRADE_VIM_PLUGINS_DOC="Upgrade vim plugin submodules"
dotcmd-upgrade-vim-plugins() {
  for plugdir in vimplugins/*; do
    if [ ! -e "$plugdir/.git" ]; then
      continue
    fi
    echo "    $plugdir"
    cd "$plugdir"
    local branchname
    branchname=$(git remote show origin | grep HEAD | cut -f 2 -d: | tr -d '[:space:]')
    git checkout -q "$branchname"
    git pull --rebase
    cd -
  done
}

DOTCMD_UPGRADE_LSP_DOC="Upgrade installed LSP servers"
dotcmd-upgrade-lsp() {
  if [ "$1" == "-h" ]; then
    echo "$DOTCMD_UPGRADE_LSP_DOC"
    return
  fi
  hascmd bash-language-server && yarn global upgrade -s bash-language-server
  hascmd vscode-json-language-server && yarn global upgrade -s vscode-langservers-extracted
  hascmd vim-language-server && yarn global upgrade -s vim-language-server
  hascmd yaml-language-server && yarn global upgrade -s yaml-language-server
  hascmd shfmt && go install mvdan.cc/sh/v3/cmd/shfmt@latest
  hascmd pyright && yarn global upgrade -s pyright
  hascmd flow && yarn global upgrade -s flow-bin
  hascmd typescript-language-server && yarn global upgrade -s typescript-language-server
}

# shellcheck disable=SC2034
DOTCMD_HELP_DOC="Print this help or help for a specific command"
dotcmd-help() {
  if [ -n "$1" ] && [ "$1" != "help" ]; then
    "dotcmd-$1" -h
  else
    echo "USAGE: $0 COMMAND

Commands:"
    print-command-help dotcmd-
  fi
}

main() {
  if [ "$(whoami)" == "root" ]; then
    echo "Do not run this script with sudo!"
    exit 1
  fi
  while getopts "hfv" opt; do
    case $opt in
      h)
        dotcmd-help
        exit
        ;;
      f)
        clear-checkpoints
        ;;
      v)
        set -x
        ;;
      \?)
        dotcmd-help
        exit 1
        ;;
    esac
  done
  shift $((OPTIND - 1))
  if [ "$(git status --porcelain | wc -l)" == "0" ]; then
    git submodule update --init --recursive
  fi
  if hascmd platform-setup; then
    platform-setup
  fi
  if hascmd wsl-setup; then
    wsl-setup
  fi
  if [ -z "$1" ]; then
    dotcmd-help
    exit 1
  else
    local cmd="dotcmd-$1"
    if command -v "$cmd" >/dev/null; then
      shift
      $cmd "$@"
    else
      dotcmd-help "$@"
      exit 1
    fi
  fi
}

main "$@"
