global !p
from vimsnippets import complete

LIST_TYPES = ["bullet", "number", "table"]
DOC_ELEMENTS = ["summary", "code", "example", "exception", "list", "para", "remarks", "value"]

endglobal

snippet elerp "Exponential lerp" !w
lerp(${1:target}, ${2:value}, Math.Pow(2, -${3:rate} * ${4:Time.deltaTime}))$0
endsnippet

snippet new "New cs file" !b
using System;

public class `!p snip.rv = re.sub(r'\..*$', '', fn)` {
	$0
}
endsnippet

# Documentation
snippet "/// *" "/// documentation" !r
/// <$1`!p snip.rv=complete(t[1], DOC_ELEMENTS)`>
/// $0
/// </$1>
endsnippet
snippet "/// code" "<code>" !b
/// <code>
/// $0
/// </code>
endsnippet
snippet "/// ex" "<example>" !b
/// <example>
/// $0
/// </example>
endsnippet
snippet "/// exc" "<exception>" !b
/// <exception cref="$1">$0</exception>
endsnippet
snippet "/// inh" "<inheritdoc>" !b
/// <inheritdoc/>
endsnippet
snippet "(/// *)item" "<item>" !r
`!p snip.rv=match[1]`<item>
`!p snip.rv=match[1]`  <term>$1</term>
`!p snip.rv=match[1]`  <description>$2</description>
`!p snip.rv=match[1]`</item>$0
endsnippet
snippet "/// list" "<list>" !b
/// <list type="$1`!p snip.rv=complete(t[1], LIST_TYPES)`">
///   $0
/// </list>
endsnippet
snippet "(/// *)lh" "<listheader>" !r
`!p snip.rv=match[1]`<listheader>
`!p snip.rv=match[1]`  <term>$1</term>
`!p snip.rv=match[1]`  <description>$2</description>
`!p snip.rv=match[1]`</list>$0
endsnippet
snippet "/// para" "<para>" !b
/// <para>
/// $0
/// </para>
endsnippet
snippet "/// param" "<param>" !b
/// <param name="$1">$0</param>
endsnippet
snippet "(///.*)pref" "<paramref>" !r
`!p snip.rv=match[1]`<paramref name="$1"/>$0
endsnippet
snippet "/// ret" "<returns>" !b
/// <returns>
/// $0
/// </returns>
endsnippet
snippet "/// rem" "<remarks>" !b
/// <remarks>
/// $0
/// </remarks>
endsnippet
snippet "(///.*)see" "<see>" !r
`!p snip.rv=match[1]`<see cref="$1"/>$0
endsnippet
snippet "(///.*)sa" "<seealso>" !r
`!p snip.rv=match[1]`<seealso cref="$1"/>$0
endsnippet
snippet "/// sum" "<summary>" !b
/// <summary>
/// $0
/// </summary>
endsnippet
snippet "/// tparam" "<typeparam>" !b
/// <typeparam name="$1">$0</typeparam>
endsnippet
snippet "(///.*)tref" "<typeparamref>" !r
`!p snip.rv=match[1]`<typeparamref name="$1"/>$0
endsnippet
snippet "/// val" "<value>" !b
/// <value>
/// $0
/// </value>
endsnippet

snippet disposable "Disposable" !b
~`!p snip.rv = fn[:-3]`() {
	Dispose(false);
}

public void Dispose() {
	Dispose(true);
}

protected virtual void Dispose(bool disposing) {
	if (disposing) {
		GC.SuppressFinalize(this);
	}
	$0
}
endsnippet

# vim:ft=snippets:
